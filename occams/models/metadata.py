"""
Common metadata modules
"""

import sqlalchemy as sa
from sqlalchemy.ext.declarative import declared_attr

from .meta import Base


@sa.event.listens_for(Base.metadata, 'before_create')
def create_touch_procedures(target, connection, **kw):
    """
    Creates necessary stored procedures for updating record timestamps
    """

    connection.execute(r"""
        CREATE OR REPLACE FUNCTION touch() RETURNS TRIGGER AS $$
        DECLARE
            _user text;
            _timestamp timestamp;
        BEGIN
            _user := (SELECT current_setting('application.user'));
            _timestamp := timeofday();

            IF tg_op = 'INSERT' THEN
                NEW.created_by := lower(_user);
                NEW.created_at := _timestamp;
            END IF;

            NEW.modified_by := lower(_user);
            NEW.modified_at := _timestamp;

            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
    """)

    connection.execute(r"""
        CREATE OR REPLACE FUNCTION touch_table(target_table regclass)
            RETURNS void AS $$
        BEGIN
            EXECUTE '
                DROP TRIGGER IF EXISTS touch_trigger ON ' || target_table || ';
                CREATE TRIGGER touch_trigger
                BEFORE INSERT OR UPDATE
                ON ' || target_table || '
                FOR EACH ROW EXECUTE PROCEDURE touch()';
        END;
        $$ LANGUAGE plpgsql;
    """)


class Referenceable(object):
    """
    Adds primary key id columns to tables.
    """

    id = sa.Column(
        sa.BigInteger,
        primary_key=True,
        doc='This value is auto-generated by the database and assigned to '
            'the item. It should not be modified, otherwise risking '
            'altered database behavior.')


class Describeable(object):
    """
    Adds standard content properties to tables.
    """

    name = sa.Column(
        sa.String,
        nullable=False,
        doc='This value is usually an ASCII label to be used for '
            'easy reference of the item. When naming an item, lowercase '
            'alphanumeric characters or hyphens. The name should also be '
            'unique within a container.')

    title = sa.Column(
        sa.Unicode,
        nullable=False,
        doc='Human readable name')

    description = sa.Column(sa.UnicodeText)


class User(Base, Referenceable):
    """
    A simple 'blame' user for audit trails
    """

    __tablename__ = 'account'

    key = sa.Column(
        sa.String,
        nullable=False,
        doc='A unique way of distinguishing a user (e.g. email or uid)')

    create_date = sa.Column(
        sa.DateTime(timezone=True),
        nullable=False,
        server_default=sa.text('CURRENT_TIMESTAMP'))

    modify_date = sa.Column(
        sa.DateTime(timezone=True),
        nullable=False,
        server_default=sa.text('CURRENT_TIMESTAMP'),
        onupdate=sa.text('CURRENT_TIMESTAMP'))

    @declared_attr
    def __table_args__(cls):
        return (
            sa.UniqueConstraint('key', name='uq_%s_key' % cls.__tablename__),
            sa.CheckConstraint(
                'create_date <= modify_date',
                name='ck_%s_valid_timeline' % cls.__tablename__))


class Modifiable(object):
    """
    Adds user edit modification meta data for lifecycle tracking.
    """

    @declared_attr
    def created_at(cls):
        return sa.Column(sa.DateTime(timezone=True), nullable=False)

    @declared_attr
    def created_by(cls):
        return sa.Column(sa.Unicode, nullable=False)

    @declared_attr
    def modified_at(cls):
        return sa.Column(
            sa.DateTime(timezone=True),
            sa.CheckConstraint(
                'created_at <= modified_at',
                'ck_%s_valid_timeline' % cls.__tablename__),
            nullable=False)

    @declared_attr
    def modified_by(cls):
        return sa.Column(sa.Unicode, nullable=False)

    @classmethod
    def __declare_first__(cls):
        sa.event.listen(
            cls.__table__,
            'after_create',
            sa.DDL(r"select touch_table('%(fullname)s')")
        )
