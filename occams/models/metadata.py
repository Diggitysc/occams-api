"""
Common metadata modules
"""

from sqlalchemy import (
    event,
    text,
    Column,
    CheckConstraint, UniqueConstraint, ForeignKey,
    DateTime, Integer, String, Unicode, UnicodeText)
from sqlalchemy.ext.declarative import declared_attr
from sqlalchemy.orm import object_session, relationship

from .meta import Base


def updateMetadata(instance, created):
    session = object_session(instance)
    assert 'blame' in session.info, \
        u'session was not configured with a blame user'

    blame = session.info['blame']

    if created:
        instance.create_user = blame

    instance.modify_user = blame


class Referenceable(object):
    """
    Adds primary key id columns to tables.
    """

    id = Column(
        Integer,
        primary_key=True,
        doc='This value is auto-generated by the database and assigned to '
            'the item. It should not be modified, otherwise risking '
            'altered database behavior.')


class Describeable(object):
    """
    Adds standard content properties to tables.
    """

    name = Column(
        String,
        nullable=False,
        doc='This value is usually an ASCII label to be used for '
            'easy reference of the item. When naming an item, lowercase '
            'alphanumeric characters or hyphens. The name should also be '
            'unique within a container.')

    title = Column(
        Unicode,
        nullable=False,
        doc='Human readable name')

    description = Column(UnicodeText)


class User(Base, Referenceable):
    """
    A simple 'blame' user for audit trails
    """

    __tablename__ = 'user'

    key = Column(
        String,
        nullable=False,
        doc='A unique way of distinguishing a user (e.g. email or uid)')

    create_date = Column(
        DateTime,
        nullable=False,
        server_default=text('CURRENT_TIMESTAMP'))

    modify_date = Column(
        DateTime,
        nullable=False,
        server_default=text('CURRENT_TIMESTAMP'),
        onupdate=text('CURRENT_TIMESTAMP'))

    @declared_attr
    def __table_args__(cls):
        return (
            UniqueConstraint('key', name='uq_%s_key' % cls.__tablename__),
            CheckConstraint(
                'create_date <= modify_date',
                name='ck_%s_valid_timeline' % cls.__tablename__))


@event.listens_for(User.__table__, 'after_create')
def register_installer(target, connection, **kw):
    """
    Blames the current user conducting the installation.
    Expects the connection to be annotated with an info "blame" key.

    """
    blame = connection.info['blame']
    connection.execute(target.insert().values(key=blame))


class Modifiable(object):
    """
    Adds user edit modification meta data for lifecycle tracking.
    """

    @declared_attr
    def create_date(cls):
        return Column(
            DateTime,
            nullable=False,
            server_default=text('CURRENT_TIMESTAMP'))

    @declared_attr
    def create_user_id(cls):
        return Column(
            Integer,
            ForeignKey(
                User.id,
                name='fk_%s_create_user_id' % cls.__tablename__,
                ondelete='RESTRICT'),
            nullable=False,
            index=True)  # SA Index() still sucks

    @declared_attr
    def create_user(cls):
        return relationship(User, foreign_keys=lambda: cls.create_user_id)

    @declared_attr
    def modify_date(cls):
        return Column(
            DateTime,
            CheckConstraint(
                'create_date <= modify_date',
                'ck_%s_valid_timeline' % cls.__tablename__),
            nullable=False,
            server_default=text('CURRENT_TIMESTAMP'),
            onupdate=text('CURRENT_TIMESTAMP'))

    @declared_attr
    def modify_user_id(cls):
        return Column(
            Integer,
            ForeignKey(
                User.id,
                name='fk_%s_modify_user_id' % cls.__tablename__,
                ondelete='RESTRICT'),
            nullable=False,
            index=True)  # SA Index() still sucks

    @declared_attr
    def modify_user(cls):
        return relationship(User, foreign_keys=lambda: cls.modify_user_id)
